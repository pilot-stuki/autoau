import time
import logging
from multiprocessing import Pool
import undetected_chromedriver as uc_webdriver

from datetime import datetime, timedelta
from selenium.webdriver.support import expected_conditions as ec
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait

from config import Config
from random import randint

config = Config()

# Logging mode
if config.get_log_file():
    logging.basicConfig(filename='autoAustralia.log',
                        filemode='w',
                        level=logging.INFO,
                        format="%(asctime)s %(levelname)s %(message)s")
else:
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

accounts = config.get_users()
TARGET_URL = config.get_target_url()
PERIOD = timedelta(hours=1, minutes=randint(45, 58), seconds=randint(45, 57))
START_DATE = datetime.now().date()
STOP_TIME = datetime.strptime('01:00', '%H:%M').time()


def main(user_from_list):
    user = user_from_list
    while True:
        target_url = TARGET_URL

        # Driver
        options = Options()
        options.add_argument('--start-maximized')
        if config.get_visibility() is False:
            options.add_argument("--headless")
        options.add_argument('--incognito')
        driver = uc_webdriver.Chrome(use_subprocess=True, options=options)
        logging.info(f'User: {user[0]} | Create web driver')

        try:
            driver.get(target_url)
            logging.info(f'User: {user[0]} | Go to login page')
            time.sleep(3)

            # Login
            btn_login = WebDriverWait(driver, 10).until(
                ec.presence_of_element_located((By.NAME, 'login')))
            time.sleep(2)
            edit_email = WebDriverWait(driver, 10).until(
                ec.presence_of_element_located((By.ID, 'email')))
            time.sleep(1)
            edit_email.send_keys(user[0])
            time.sleep(1)
            edit_pass = WebDriverWait(driver, 10).until(
                ec.presence_of_element_located((By.ID, 'password')))
            time.sleep(1)
            edit_pass.send_keys(user[1])
            time.sleep(1)
            btn_login.click()
            logging.info(f'User: {user[0]} | Logged in')

            # Close admin message
            time.sleep(3)
            btn_close = WebDriverWait(driver, 10).until(
                ec.presence_of_element_located((By.XPATH, '//button[text()="Close"]')))
            btn_close.click()
            logging.info(f'User: {user[0]} | Close first admin message')

            # Change status "Available Now" to "YES"
            time.sleep(3)
            toggle_checkbox = WebDriverWait(driver, 10).until(
                ec.presence_of_element_located((By.XPATH, '//*[@id="available-now"]/div')))

            selector = 'div.available-now.smart-form input[name="checkbox-toggle"]'

            available_now_status = driver.execute_script(
                f"return document.querySelector('{selector}').checked"
            )

            if available_now_status is True:
                logging.info(f'User: {user[0]} | Toggle is enabled. Nothing to do')
            else:
                toggle_checkbox.click()
                # Close message
                time.sleep(2)
                btn_ok = WebDriverWait(driver, 10).until(
                    ec.presence_of_element_located((By.XPATH, '//button[text()="OK"]')))
                btn_ok.click()
                logging.info(f'User: {user[0]} | First: Change status "Available Now" to "YES"')
                time.sleep(3)

            timestamp = datetime.now()

            while True:
                try:
                    time.sleep(randint(422, 838))

                    date_now = datetime.now().date()
                    now_sydney_time = config.get_current_sydney_time()

                    timestamp2 = datetime.now()
                    t_delta = timestamp2 - timestamp
                    t_delta = t_delta - timedelta(microseconds=t_delta.microseconds)

                    if t_delta >= PERIOD:
                        # Change status "Available Now" to "NO"
                        time.sleep(4)
                        toggle_checkbox = WebDriverWait(driver, 10).until(
                            ec.presence_of_element_located((By.XPATH, '//*[@id="available-now"]/div')))
                        toggle_checkbox.click()
                        timestamp = datetime.now()
                        time.sleep(2)
                        # Close message
                        time.sleep(4)
                        btn_ok = WebDriverWait(driver, 10).until(
                            ec.presence_of_element_located((By.XPATH, '//button[text()="OK"]')))
                        btn_ok.click()
                        logging.info(f'User: {user[0]} | Change status "Available Now" to "NO"')
                        time.sleep(4)
                        # Change status "Available Now" to "YES"
                        toggle_checkbox2 = WebDriverWait(driver, 10).until(
                            ec.presence_of_element_located((By.XPATH, '//*[@id="available-now"]/div')))
                        toggle_checkbox2.click()
                        logging.info(f'User: {user[0]} | Change status "Available Now" to "YES"')
                        time.sleep(3)
                        # Close message
                        time.sleep(4)
                        btn_ok = WebDriverWait(driver, 10).until(
                            ec.presence_of_element_located((By.XPATH, '//button[text()="OK"]')))
                        btn_ok.click()
                        time.sleep(8)

                        timestamp = datetime.now()

                        logging.info(f'User: {user[0]} | Reactivate - OK')

                    elif START_DATE < date_now and now_sydney_time >= STOP_TIME:
                        logging.info(f'User: {user[0]} | Stop cycle by timing.')
                        break

                    else:
                        driver.refresh()
                        page = driver.page_source
                        check_page = page.find('<h1>Whoops, looks like something went wrong.</h1>')

                        if check_page != -1:
                            time.sleep(1)
                            driver.get('https://scarletblue.com.au/members-area/')
                            logging.info(f'User: {user[0]} | Bypass "Whoops!" page. It`s OK')

                        # Close administration message
                        time.sleep(8)
                        btn_close = WebDriverWait(driver, 10).until(
                            ec.presence_of_element_located((By.XPATH, '//button[text()="Close"]')))
                        time.sleep(1)
                        btn_close.click()
                        logging.info(f'User: {user[0]} | Close admin message')
                        logging.info(f'User: {user[0]} | Refreshing page done')

                except Exception as exception:
                    logging.warning(f'User: {user[0]} | Something went wrong in refresh cycle. The loop iteration will continue.')
                    continue

            # Change status "Available Now" to "NO"
            time.sleep(4)
            toggle_checkbox = WebDriverWait(driver, 10).until(
                ec.presence_of_element_located((By.XPATH, '//*[@id="available-now"]/div')))
            time.sleep(1)
            toggle_checkbox.click()

            # Close message
            time.sleep(2)
            btn_ok = WebDriverWait(driver, 10).until(
                ec.presence_of_element_located((By.XPATH, '//button[text()="OK"]')))
            btn_ok.click()

            # Log-out
            btn_logout = WebDriverWait(driver, 10).until(
                ec.presence_of_element_located((By.XPATH, '//*[@id="sb-navigation"]/ul/li/a[text()="Logout"]')))
            btn_logout.click()
            logging.info(f'User: {user[0]} log-out')

            # Agreeing with admin message on home page
            time.sleep(4)
            msg_agree = WebDriverWait(driver, 10).until(
                ec.presence_of_element_located((By.XPATH, '//*[@class="terms-and-conditions__enter-link"]')))
            logging.info(f'User: {user[0]} | Agreeing with admin message on home page.')
            msg_agree.click()
            time.sleep(5)
            driver.quit()
            logging.info(f'User: {user[0]} | Close window.')
            break

        except Exception as exception:
            logging.warning(f'User: {user[0]} | Something went wrong in main cycle. The browser instance will be restarted.')
            print(exception)
            driver.quit()
            continue


if __name__ == '__main__':
    processes = len(accounts)
    pool = Pool(processes)
    pool.map(main, accounts)
